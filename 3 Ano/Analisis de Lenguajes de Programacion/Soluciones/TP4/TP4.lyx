#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style french
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Paragraph
Ejercicio 1
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Haskell"
inline false
status open

\begin_layout Plain Layout

return x >>= f
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\equiv\left\langle def.return\right\rangle $
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Haskell"
inline false
status open

\begin_layout Plain Layout

State (
\backslash
s -> (x, s)) >>= f
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\equiv\left\langle def.\gg=\right\rangle $
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Haskell"
inline false
status open

\begin_layout Plain Layout

State (
\backslash
s -> let (v, s') = runState (State (
\backslash
s -> (x, s))) s
\end_layout

\begin_layout Plain Layout

             in runState (f v) s')
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\equiv\left\langle def.runState\right\rangle $
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Haskell"
inline false
status open

\begin_layout Plain Layout

State (
\backslash
s -> let (v, s') = (
\backslash
s -> (x, s)) s
\end_layout

\begin_layout Plain Layout

             in runState (f v) s')
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\equiv_{\beta}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Haskell"
inline false
status open

\begin_layout Plain Layout

State (
\backslash
s -> let (v, s') = (x, s)
\end_layout

\begin_layout Plain Layout

             in runState (f v) s')
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\equiv\left\langle def.let\right\rangle $
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Haskell"
inline false
status open

\begin_layout Plain Layout

State (
\backslash
s -> runState (f x) s)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\equiv_{\eta}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Haskell"
inline false
status open

\begin_layout Plain Layout

State (runState (f x))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\equiv\left\langle def.\circ\right\rangle $
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Haskell"
inline false
status open

\begin_layout Plain Layout

(State .
 runState) (f x)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\equiv\left\langle State\circ runState\equiv id\right\rangle $
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Haskell"
inline false
status open

\begin_layout Plain Layout

f x
\end_layout

\end_inset


\end_layout

\end_body
\end_document
