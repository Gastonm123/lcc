#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language spanish-mexico
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style french
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Enumerate
Las listas finitas pueden especificarse como un TAD con los constructores:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

Nil
\end_layout

\end_inset

: Construye una lista vacía.
\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

Cons
\end_layout

\end_inset

: Agrega un elemento a la lista.
\end_layout

\begin_layout Standard
y las siguientes operaciones:
\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

null
\end_layout

\end_inset

: Nos dice si la lista es vacía o no.
\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

head
\end_layout

\end_inset

: Devuelve el primer elemento de la lista.
\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

tail
\end_layout

\end_inset

: Devuelve todos los elementos de la lista menos el primero.
\end_layout

\begin_layout Enumerate
Dar una especificación algebraica del TAD listas finitas.
\end_layout

\begin_layout Enumerate
Dar una especificación tomando como modelo las secuencias.
\end_layout

\begin_layout Enumerate
Asumiendo que 
\begin_inset Formula $a$
\end_inset

 es un tipo con igualdad, especificar una función 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

inL :: List a -> a -> Bool
\end_layout

\end_inset

 tal que 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

inL xs x
\end_layout

\end_inset

 
\begin_inset Formula $\equiv$
\end_inset

 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

True
\end_layout

\end_inset

 si y solo si
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

 x
\end_layout

\end_inset

 es un elemento de
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

 xs
\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
Especificar una función que elimina todas las ocurrencias de un elemento
 dado.
\end_layout

\begin_layout Paragraph
Soluciones
\end_layout

\begin_layout Enumerate
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell multicolumn="1" alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TAD 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

List (a :: Set)
\end_layout

\end_inset

 where
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

import Bool
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

Nil :: List a
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

Cons :: a -> List a -> List a
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

null :: List a -> Bool
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

head :: List a -> a
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

tail :: List a -> List a
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

null Nil
\end_layout

\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\equiv$
\end_inset

 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

True
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

null (Cons x xs)
\end_layout

\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\equiv$
\end_inset

 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

False
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

head (Cons x xs)
\end_layout

\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\equiv$
\end_inset


\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

 x
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

tail (Cons x xs)
\end_layout

\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\equiv$
\end_inset


\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

 xs
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

Nil
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\equiv$
\end_inset

 
\begin_inset Formula $\left\langle \right\rangle $
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

Cons (
\end_layout

\end_inset


\begin_inset Formula $x$
\end_inset

 
\begin_inset Formula $\left\langle x_{1},\ldots,x_{n}\right\rangle $
\end_inset


\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\equiv$
\end_inset

 
\begin_inset Formula $\left\langle x,x_{1},\ldots,x_{n}\right\rangle $
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

null 
\end_layout

\end_inset

 
\begin_inset Formula $\left\langle \right\rangle $
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\equiv$
\end_inset

 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

True
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

null 
\end_layout

\end_inset

 
\begin_inset Formula $\left\langle x_{1},\ldots,x_{n}\right\rangle $
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\equiv$
\end_inset

 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

False
\end_layout

\end_inset

 (si 
\begin_inset Formula $n>0$
\end_inset

)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

head 
\end_layout

\end_inset

 
\begin_inset Formula $\left\langle x_{1},\ldots,x_{n}\right\rangle $
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\equiv$
\end_inset

 
\begin_inset Formula $x_{1}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

tail 
\end_layout

\end_inset

 
\begin_inset Formula $\left\langle x_{1},\ldots,x_{n}\right\rangle $
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\equiv$
\end_inset

 
\begin_inset Formula $\left\langle x_{2},\ldots,x_{n}\right\rangle $
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

inL Nil x
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\equiv$
\end_inset

 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

False
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

inL (Cons x xs) y
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\equiv$
\end_inset

 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

if x == y then True else inL xs y
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

delete Nil x
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\equiv$
\end_inset

 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

Nil
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

delete (Cons x xs) y
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\equiv$
\end_inset

 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

if x == y then delete xs y
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

            else Cons x (delete xs y)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Dado el TAD pilas, con las siguientes operaciones:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

Empty
\end_layout

\end_inset

: Construye una pila inicialmente vacía.
\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

Push
\end_layout

\end_inset

: Agrega un elemento al tope de la pila.
\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

isEmpty
\end_layout

\end_inset

: Devuelve verdadero si su argumento es una pila vacía, falso en caso contrario.
\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

top
\end_layout

\end_inset

: Devuelve el elemento que se encuentra al tope de la pila.
\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

pop
\end_layout

\end_inset

: Saca el elemento que se encuentra al tope de la pila.
\end_layout

\begin_layout Standard
Dar una especificación algebraica del TAD pilas y una especificación tomando
 como modelo las secuencias.
\end_layout

\begin_layout Paragraph
Soluciones
\end_layout

\begin_layout Itemize
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell multicolumn="1" alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TAD 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

Stack (a :: Set)
\end_layout

\end_inset

 where
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

import Bool
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

Empty :: Stack a
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

Push :: a -> Stack a -> Stack a
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

isEmpty :: Stack a -> Bool
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

top :: Stack a -> a
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

pop :: Stack a -> Stack a
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

isEmpty Empty
\end_layout

\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\equiv$
\end_inset

 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

True
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

isEmpty (Push x xs)
\end_layout

\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\equiv$
\end_inset

 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

False
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

top (Push x xs)
\end_layout

\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\equiv$
\end_inset


\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

 x
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

pop (Push x xs)
\end_layout

\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\equiv$
\end_inset


\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

 xs
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

Empty
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\equiv$
\end_inset

 
\begin_inset Formula $\left\langle \right\rangle $
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

Push (
\end_layout

\end_inset


\begin_inset Formula $x$
\end_inset

 
\begin_inset Formula $\left\langle x_{1},\ldots,x_{n}\right\rangle $
\end_inset


\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\equiv$
\end_inset

 
\begin_inset Formula $\left\langle x,x_{1},\ldots,x_{n}\right\rangle $
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

isEmpty 
\end_layout

\end_inset

 
\begin_inset Formula $\left\langle \right\rangle $
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\equiv$
\end_inset

 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

True
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

isEmpty 
\end_layout

\end_inset

 
\begin_inset Formula $\left\langle x_{1},\ldots,x_{n}\right\rangle $
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\equiv$
\end_inset

 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

False
\end_layout

\end_inset

 (si 
\begin_inset Formula $n>0$
\end_inset

)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

top 
\end_layout

\end_inset

 
\begin_inset Formula $\left\langle x_{1},\ldots,x_{n}\right\rangle $
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\equiv$
\end_inset

 
\begin_inset Formula $x_{1}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

pop 
\end_layout

\end_inset

 
\begin_inset Formula $\left\langle x_{1},\ldots,x_{n}\right\rangle $
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\equiv$
\end_inset

 
\begin_inset Formula $\left\langle x_{2},\ldots,x_{n}\right\rangle $
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Asumiendo que 
\begin_inset Formula $a$
\end_inset

 es un tipo con igualdad, completar la siguiente especificación algebraica
 del TAD conjunto.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell multicolumn="1" alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TAD 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

Conjunto (a :: Set)
\end_layout

\end_inset

 where
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

import Bool
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

Vacio :: Conjunto a
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

Insertar :: a -> Conjunto a -> Conjunto a
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

borrar :: a -> Conjunto a -> Conjunto a
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

esVacio :: Conjunto a -> Bool
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

union :: Conjunto a -> Conjunto a -> Conjunto a
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

interseccion :: Conjunto a -> Conjunto a -> Conjunto a
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

resta :: Conjunto a -> Conjunto a -> Conjunto a
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
¿Que pasaría si se agregase una función 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

choose :: Conjunto a -> a
\end_layout

\end_inset

, tal que 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

choose (insertar x c)
\end_layout

\end_inset

 
\begin_inset Formula $\equiv$
\end_inset


\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

 x
\end_layout

\end_inset

?
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Paragraph
Solución
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="20" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

insertar x (insertar y c)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\equiv$
\end_inset

 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

insertar y (insertar x c)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

insertar x (insertar x c)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\equiv$
\end_inset

 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

insertar x c
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

borrar x Vacio
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\equiv$
\end_inset

 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

Vacio
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

borrar x (insertar y c)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\equiv$
\end_inset

 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

if x == y
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

  then borrar x c
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

  else insertar y (borrar x c)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

esVacio Vacio
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\equiv$
\end_inset

 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

True
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

esVacio (insertar x xs)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\equiv$
\end_inset

 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

False
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

union c Vacio
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\equiv$
\end_inset


\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

 c
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

union c (insertar x c')
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\equiv$
\end_inset

 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

union (insertar x c) c'
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

in x Vacio
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\equiv$
\end_inset

 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

False
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

in x (insertar y c)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\equiv$
\end_inset

 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

if x == y then True
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

            else in x c
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

interseccion c Vacio
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\equiv$
\end_inset

 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

Vacio
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

interseccion c (insertar x c')
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\equiv$
\end_inset

 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

if x in c
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

  then insertar x (interseccion c c')
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

  else interseccion c c'
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

resta c Vacio
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\equiv$
\end_inset


\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

 c
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

resta c (insertar x c')
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\equiv$
\end_inset

 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

resta (borrar x c) c'
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

inL (Cons x xs) y
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\equiv$
\end_inset

 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

if x == y then True else inL xs y
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
El TAD 
\emph on
priority queue
\emph default
 es una cola en la cual cada elemento tiene asociado un valor que es su
 prioridad (a dos elementos distintos le corresponden prioridades distintas).
 Los valores que definen la prioridad de los elementos pertenecen a un conjunto
 ordenado.
 Las siguientes son las operaciones soportadas por este TAD:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{samepage}
\end_layout

\end_inset


\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

Vacia
\end_layout

\end_inset

: Construye una priority queue vacía.
\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

Poner
\end_layout

\end_inset

: Agrega un elemento a una priority queue con una prioridad dada.
\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

primero
\end_layout

\end_inset

: Devuelve el elemento con mayor prioridad de una priority queue.
\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

sacar
\end_layout

\end_inset

: Elimina de una priority queue el elemento con mayor prioridad.
\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

esVacia
\end_layout

\end_inset

: Determina si una priority queue es vacía.
\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

union
\end_layout

\end_inset

: Une dos priority queues.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{samepage}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dar una especificación algebraica del TAD priority queue y una especificación
 tomando como modelo los conjuntos.
\end_layout

\end_deeper
\begin_layout Enumerate
Agregar a la siguiente definición del TAD árboles balanceados, una especificació
n para las operaciones 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

size
\end_layout

\end_inset

 y 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

expose
\end_layout

\end_inset

:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell multicolumn="1" alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TAD 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

BalT (a :: Ordered Set)
\end_layout

\end_inset

 where
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

import Maybe, Nat, Tupla2
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

Empty :: BalT a
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

join :: BalT a -> Maybe a -> BalT a -> BalT a
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

size :: BalT a -> Nat
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

expose :: BalT a -> Maybe (BalT a, a, BalT a)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Itemize
La operación 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

join
\end_layout

\end_inset

 toma un árbol
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

 l
\end_layout

\end_inset

, un elemento opcional y un árbol
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

 r
\end_layout

\end_inset

.
 Si
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

 l
\end_layout

\end_inset

 y
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

 r
\end_layout

\end_inset

 son árboles de búsqueda balanceados tales que todos los elementos de
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

 l
\end_layout

\end_inset

 sean menores que todos los elementos de
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

 r
\end_layout

\end_inset

 y el elemento opcional es más grande que los de
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

 l
\end_layout

\end_inset

 y menor que los de
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

 r
\end_layout

\end_inset

, entonces 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

join
\end_layout

\end_inset

 crea un nuevo árbol de búsqueda balanceado.
\end_layout

\begin_layout Itemize
Las operaciones 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

Empty
\end_layout

\end_inset

 y 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

size
\end_layout

\end_inset

 son obvias.
\end_layout

\begin_layout Itemize
La operación 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

expose
\end_layout

\end_inset

 toma un árbol
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

 t
\end_layout

\end_inset

 y nos da 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

Nothing
\end_layout

\end_inset

 si el árbol está vacío, y en otro caso nos devuelve un árbol izquierdo,
 un elemento raíz y un árbol derecho de un árbol de búsqueda que contiene
 todos los elementos de
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

 t
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Notar que 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

join
\end_layout

\end_inset

 no es simplemente un constructor sino que tiene que realizar cierto trabajo
 para devolver un árbol balanceado.
 Debido a esto es conveniente especificar 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

expose
\end_layout

\end_inset

 por casos sobre su resultado.
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Demostrar que 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

(uncurry zip) .
 unzip
\end_layout

\end_inset

 
\begin_inset Formula $\equiv$
\end_inset

 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

id
\end_layout

\end_inset

, siendo:
\begin_inset listings
lstparams "language=Haskell"
inline false
status open

\begin_layout Plain Layout

zip :: [a] -> [b] -> [(a,b)]
\end_layout

\begin_layout Plain Layout

zip [] ys         = []
\end_layout

\begin_layout Plain Layout

zip (x:xs) []     = []
\end_layout

\begin_layout Plain Layout

zip (x:xs) (y:ys) = (x,y) : zip xs ys
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

unzip :: [(a,b)] -> ([a], [b])
\end_layout

\begin_layout Plain Layout

unzip []         = ([], [])
\end_layout

\begin_layout Plain Layout

unzip ((x,y):ps) = (x:xs, y:ys)
\end_layout

\begin_layout Plain Layout

                   where (xs,ys) = unzip ps
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uncurry :: (a -> b -> c) -> ((a,b) -> c)
\end_layout

\begin_layout Plain Layout

uncurry f p = f (fst p) (snd p)
\end_layout

\end_inset


\end_layout

\end_body
\end_document
